/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Loca_db_construction;

import java.sql.*;
import java.util.List;
import java.util.ArrayList;
import org.postgis.*;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class App {

    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws SQLException {
        System.out.println(new App().getGreeting());

	Statement nomDb = connectToNomDb();
	//testGeom(nomDb, "placex");

	Statement locaDb = createLocaDb();
	transferGeoElements(nomDb, locaDb);
	dedupeRoads(locaDb);
	//testGeom(locaDb, "elems");

	List<double[]> area = new ArrayList<>();
	area.add(new double[]{-12.4993515, -37.4106643});
	area.add(new double[]{-12.5110245, -37.4398378});
	area.add(new double[]{-12.4567795, -37.4376570});
	area.add(new double[]{-12.4545479, -37.3966189});
	area.add(new double[]{-12.4993515, -37.4106643});
	long popindex = 100;

	queryLocaDb(locaDb, area, popindex);

	locaDb.close();
	nomDb.close();
    }

    /**
     * Insert:
     * - popindex: increasing with popularity)
     * - super-category: Nature/Civilization/Road
     * ...
     */
    private static void transferGeoElements(Statement nomDb, Statement locaDb) throws SQLException {
	locaDb.executeUpdate("CREATE TABLE elems (" +
			     "popindex BIGINT PRIMARY KEY, " +
			     "name TEXT NOT NULL, " +
			     "supercat TEXT NOT NULL, " +
			     "subcat TEXT NOT NULL, " +
			     "geometry geometry(Geometry,4326) NOT NULL, " +
			     "osm_id TEXT UNIQUE NOT NULL)");

	//ResultSet rs = nomDb.executeQuery("SELECT class,type,name,geometry FROM placex ORDER BY importance");
	ResultSet rs = nomDb.executeQuery("SELECT name,class,type,geometry,osm_type,osm_id FROM placex ORDER BY rank_search");
	long popindex = 0;

	while (rs.next()) {
	    String name = rs.getString(1);
	    if (!okName(name)) continue;
	    String subcat = subcat(rs.getString(2), rs.getString(3));
	    String supercat = supercat(subcat);
	    PGgeometry shape = (PGgeometry)rs.getObject(4);
	    String osmId = rs.getString(5) + ":" + rs.getString(6);

	    String sql = String.format("INSERT INTO elems VALUES " +
				       "(%s, $$%s$$, '%s', '%s', '%s', '%s') " +
				       "ON CONFLICT (osm_id) DO NOTHING",
				       popindex++, name, supercat, subcat, shape, osmId);
	    locaDb.executeUpdate(sql);
	}
	rs.close();
    }

    private static boolean okName(String name) {
	return name != null && name.contains("\"name\"=>");

    }

    private static void dedupeRoads(Statement locaDb) {
	// TODO
    }

    private static String subcat(String key, String value) {
	//return (value.equalsIgnoreCase("yes") ? key : value);
	return key + ":" + value;
    }

    private static String supercat(String subcat) {
	return "Civilization";
    }

    /**
     * @param area Return elements in this area.
     * @param popindexLimit Return elements with popindex larger than this.
     * @param count Number of elements to return.
     *
     * @return Geo-objects inside area, [lon lat]
     */
    public static List<GeoObject> queryLocaDb(Statement st, List<double[]> area, long popindexLimit) throws SQLException {
	String sql = String.format("SELECT * FROM elems WHERE ST_Intersects(geometry, 'SRID=4326;%s') AND popindex > %s",
				   polystr(area), popindexLimit);
	ResultSet rs = st.executeQuery(sql);

	while (rs.next()) {
	    long popindex = rs.getLong(1);
	    String name = rs.getString(2);
	    String supercat = rs.getString(3);
	    String subcat = rs.getString(4);
	    PGgeometry shape = (PGgeometry)rs.getObject(5);
	    String osmId = rs.getString(6);

	    System.out.printf("%s. %s. %s. %s. %s\n",
			      popindex, defaultName(name), supercat, subcat, webAddress(osmId));
	}

	return null;
    }

    /**
     * @param ns [lon lat]
     * @return "POLYGON((lon lat,lon lat,lon lat,...))"
     */
    private static String polystr(List<double[]> ns) {
	StringBuilder sb = new StringBuilder();

	for (double[] n : ns) {
	    sb.append(String.format("%s %s,", n[0], n[1]));
	}

	String str = sb.toString();
	return "POLYGON((" + str.substring(0, str.length()-1) + "))";
    }

    /**
     * @param name Name-data, multiple names from different countries.
     */
    private static String defaultName(String name) {
	String regex = "\"name\"=>\"(.*?)\"";
	Pattern p = Pattern.compile(regex);
	Matcher m = p.matcher(name);

	if (!m.find()) throw new RuntimeException("No default name:\n" + name);
	return m.group(1);
    }

    private static String webAddress(String osmId) {
	String type = osmId.split(":")[0];
	String id = osmId.split(":")[1];
	type = type.equals("N") ? "node" : (type.equals("W") ? "way" : "relation");
	return String.format("https://www.openstreetmap.org/%s/%s", type, id);
    }

    private static Statement createLocaDb() throws SQLException {
	String url = "jdbc:postgresql://localhost/";
	Connection conn = DriverManager.getConnection(url + "nominatim", "martin", "pass");
	Statement st = conn.createStatement();
        st.execute("DROP DATABASE IF EXISTS loca");
	st.execute("CREATE DATABASE loca");
        st.close();
        conn.close();

	conn = DriverManager.getConnection(url + "loca", "martin", "pass");
	//((org.postgresql.PGConnection)conn).addDataType("geometry", "org.postgis.PGgeometry");
	st = conn.createStatement();
	st.execute("CREATE EXTENSION postgis");
	return st;
    }

    private static Statement connectToNomDb() throws SQLException {
	String url = "jdbc:postgresql://localhost/nominatim";
	Connection conn = DriverManager.getConnection(url, "martin", "pass");

	conn.setAutoCommit(false);
	Statement st = conn.createStatement();
	st.setFetchSize(50);
	return st;
    }

    private static void testGeom(Statement st, String table) throws SQLException {
	ResultSet r = st.executeQuery("SELECT geometry,name FROM " + table);

	while(r.next()) {
	    /*
	     * Retrieve the geometry as an object then cast it to the geometry type.
	     * Print things out.
	     */
	    PGgeometry geom = (PGgeometry)r.getObject(1);
	    String name = r.getString(2);
	    System.out.println(name + ". " + geom);
	}
	st.close();
    }
}
