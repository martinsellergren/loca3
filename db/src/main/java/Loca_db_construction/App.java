/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Loca_db_construction;

import java.sql.*;
import java.util.List;
import java.util.ArrayList;
import org.postgis.*;

public class App {

    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws SQLException {
        System.out.println(new App().getGreeting());

	Statement nomDb = connectToNomDb();
	//testGeom(nomDb, "placex");
	
	Statement locaDb = createLocaDb();
	transferGeoElements(nomDb, locaDb);
	dedupeRoads(locaDb);
	//testGeom(locaDb, "elems");
      
	List<double[]> area = new ArrayList<>();
	area.add(new double[]{0, 0});
	area.add(new double[]{10, 0});
	area.add(new double[]{10, 10});
	//area.add(new double[]{0, 0});
	long popindex = 0;
	
	queryLocaDb(locaDb, area, popindex);

	locaDb.close();
	nomDb.close();
    }

    /**
     * Insert: 
     * - popindex: increasing with popularity)
     * - super-category: Nature/Civilization/Road
     * ...
     */
    private static void transferGeoElements(Statement nomDb, Statement locaDb) throws SQLException {
	locaDb.executeUpdate("CREATE TABLE elems (" +
			     "popindex BIGINT PRIMARY KEY, " +
			     "name TEXT NOT NULL, " +
			     "supercat TEXT NOT NULL, " +
			     "subcat TEXT NOT NULL, " +
			     "geometry geometry(Geometry,4326) NOT NULL, " +
			     "osm_id TEXT UNIQUE NOT NULL)");
	
	//ResultSet rs = nomDb.executeQuery("SELECT class,type,name,geometry FROM placex ORDER BY importance");
	ResultSet rs = nomDb.executeQuery("SELECT name,class,type,geometry,osm_type,osm_id FROM placex ORDER BY rank_search");
	long popindex = 0;

	while (rs.next()) {
	    String name = rs.getString(1);
	    if (name == null) continue;
	    popindex += 1;
	    String subcat = subcat(rs.getString(2), rs.getString(3));
	    String supercat = supercat(subcat);
	    PGgeometry shape = (PGgeometry)rs.getObject(4);
	    String osmId = rs.getString(5) + ":" + rs.getString(6);
 
	    String sql = String.format("INSERT INTO elems VALUES " +
				       "(%s, $$%s$$, '%s', '%s', '%s', '%s') " +
				       "ON CONFLICT (osm_id) DO NOTHING",
				       popindex, name, supercat, subcat, shape, osmId);
	    locaDb.executeUpdate(sql);
	}
	rs.close();
    }

    private static void dedupeRoads(Statement locaDb) {
	// TODO
    }

    private static String subcat(String key, String value) {
	//return (value.equalsIgnoreCase("yes") ? key : value);
	return key + " : " + value;
    }

    private static String supercat(String subcat) {
	return "Civilization";
    }

    /**
     * @param area Return elements in this area.
     * @param popindex Return elements with popindex larger than this.
     * @param count Number of elements to return.
     *
     * @return Geo-objects inside area.
     */
    public static List<GeoObject> queryLocaDb(Statement st, List<double[]> area, long popindex) throws SQLException {
	
	return null;
    }

    private static Statement createLocaDb() throws SQLException {
	String url = "jdbc:postgresql://localhost/";
	Connection conn = DriverManager.getConnection(url, "martin", "pass");
	Statement st = conn.createStatement();
	
	try {
	    st.executeUpdate("DROP DATABASE loca");
	} catch (Exception e) {}
	st.executeUpdate("CREATE DATABASE loca");

	conn = DriverManager.getConnection(url + "loca", "martin", "pass");
	return createPostgisStatement(conn);
    }

    private static Statement createPostgisStatement(Connection conn) throws SQLException {
	Statement st = conn.createStatement();
	((org.postgresql.PGConnection)conn).addDataType("geometry", "org.postgis.PGgeometry");
	st = conn.createStatement();
	st.execute("CREATE EXTENSION IF NOT EXISTS postgis");
	return st;
    }

    private static Statement connectToNomDb() throws SQLException {
	String url = "jdbc:postgresql://localhost/nominatim";
	Connection conn = DriverManager.getConnection(url, "martin", "pass");
	//((org.postgresql.PGConnection)conn).addDataType("geometry",Class.forName("org.postgis.PGgeometry"));
	//((org.postgresql.PGConnection)conn).addDataType("box3d", Class.forName("org.postgis.PGbox3d"));
	
	conn.setAutoCommit(false);
	Statement st = conn.createStatement();
	st.setFetchSize(50);
	return st;	
    }

    private static void testGeom(Statement st, String table) throws SQLException {
	ResultSet r = st.executeQuery("SELECT geometry,name FROM " + table);

	while(r.next()) {
	    /*
	     * Retrieve the geometry as an object then cast it to the geometry type.
	     * Print things out.
	     */
	    PGgeometry geom = (PGgeometry)r.getObject(1);
	    String name = r.getString(2);
	    System.out.println(name + ". " + geom);
	}
	st.close();	
    }
}
