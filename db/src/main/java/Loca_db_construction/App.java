/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Loca_db_construction;

import java.sql.*;
import java.util.List;
import java.util.ArrayList;

public class App {

    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws SQLException {
        System.out.println(new App().getGreeting());

	Statement nomDb = connectToNomDb();
	Statement locaDb = createLocaDb();

	transferGeoElements(nomDb, locaDb);
	completeLocaDb(locaDb);

      
	List<double[]> area = new ArrayList<>();
	area.add(new double[]{0, 0});
	area.add(new double[]{10, 0});
	area.add(new double[]{10, 10});
	//area.add(new double[]{0, 0});
	long popindex = 0;
	
	queryLocaDb(locaDb, area, popindex);

	nomDb.close();
	locaDb.close();
    }

    /**
     * Insert Name, Rank, Shape, Main tag.
     */
    private static void transferGeoElements(Statement nomDb, Statement locaDb) throws SQLException {
	ResultSet rs = nomDb.executeQuery("SELECT name,rank_search FROM placex");
	while (rs.next()) {
	    System.out.format("%s, %s\n", rs.getString(1), rs.getString(2));
	}
	rs.close();
    }

    /**
     * 1. Give elements popindex, index increasing with popularity.
     * 2. Give elements a supercategory: Nature, Civilisation, Road.
     * 3. Main tag -> subcategory.
     */
    private static void completeLocaDb(Statement st) throws SQLException {
	
    }

    /**
     * @param area Return elements in this area.
     * @param popindex Return elements with popindex larger than this.
     * @param count Number of elements to return.
     *
     * @return Geo-objects inside area.
     */
    private static List<GeoObject> queryLocaDb(Statement st, List<double[]> area, long popindex) throws SQLException {
	
	return null;
    }

    private static Statement createLocaDb() throws SQLException {
	String url = "jdbc:postgresql://localhost/";
	Connection conn = DriverManager.getConnection(url, "martin", "pass");
	Statement st = conn.createStatement();
	
	try {
	    st.executeUpdate("DROP DATABASE loca");
	} catch (Exception e) {}
	st.executeUpdate("CREATE DATABASE loca");

	conn.setAutoCommit(false);
	st.setFetchSize(50);
	return st;
    }

    private static Statement connectToNomDb() throws SQLException {
	String url = "jdbc:postgresql://localhost/nominatim";
	Connection conn = DriverManager.getConnection(url, "martin", "pass");
	conn.setAutoCommit(false);
	Statement st = conn.createStatement();
	st.setFetchSize(50);
	return st;	
    }
}
